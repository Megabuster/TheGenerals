var gameLogic;!function(a){function b(a,b){var d=c(a),e=c(b);return 1===a&&16===b?1:16===a&&1===b?16:(a>15?a-=15:b>15&&(b-=15),a===b?0:2===a&&15===b?"white"===d?2:17:15===a&&2===b?"white"===e?2:17:a>b?"white"===d?a:a+=15:b>a?"white"===e?b:b+=15:void 0)}function c(a){return 0===a?"gray":a>15?"black":"white"}function d(a){switch(a){case 0:return"EMP";case 1:return"WFL";case 2:return"WPR";case 3:return"WSE";case 4:return"WL2";case 5:return"WL1";case 6:return"WCA";case 7:return"WMA";case 8:return"WLC";case 9:return"WCO";case 10:return"WS1";case 11:return"WS2";case 12:return"WS3";case 13:return"WS4";case 14:return"WS5";case 15:return"WSP";case 16:return"BFL";case 17:return"BPR";case 18:return"BSE";case 19:return"BL2";case 20:return"BL1";case 21:return"BCA";case 22:return"BMA";case 23:return"BLC";case 24:return"BCO";case 25:return"BS1";case 26:return"BS2";case 27:return"BS3";case 28:return"BS4";case 29:return"BS5";case 30:return"BSP";case 31:return"white";case 32:return"black";case 33:return"light"}}function e(){for(var b=[],c=0;c<a.ROWS;c++){b[c]=[];for(var d=0;d<a.COLS;d++)b[c][d]={name:"EMP",value:0,color:"gray"}}return b}function f(){var a=e();return a=[[{name:"EMP",value:0,color:"gray"},{name:"BPR",value:17,color:"black"},{name:"BS1",value:25,color:"black"},{name:"BCA",value:21,color:"black"},{name:"BSE",value:18,color:"black"},{name:"BPR",value:17,color:"black"},{name:"BPR",value:17,color:"black"},{name:"BLC",value:23,color:"black"},{name:"BSP",value:30,color:"black"}],[{name:"EMP",value:0,color:"gray"},{name:"BS5",value:29,color:"black"},{name:"BPR",value:17,color:"black"},{name:"EMP",value:0,color:"gray"},{name:"BFL",value:16,color:"black"},{name:"BS2",value:26,color:"black"},{name:"BPR",value:17,color:"black"},{name:"BL1",value:20,color:"black"},{name:"BS4",value:28,color:"black"}],[{name:"BMA",value:22,color:"black"},{name:"BS3",value:27,color:"black"},{name:"BCO",value:24,color:"black"},{name:"EMP",value:0,color:"gray"},{name:"BPR",value:17,color:"black"},{name:"BL2",value:19,color:"black"},{name:"BSP",value:30,color:"black"},{name:"EMP",value:0,color:"gray"},{name:"EMP",value:0,color:"gray"}],[{name:"EMP",value:0,color:"gray"},{name:"EMP",value:0,color:"gray"},{name:"EMP",value:0,color:"gray"},{name:"EMP",value:0,color:"gray"},{name:"EMP",value:0,color:"gray"},{name:"EMP",value:0,color:"gray"},{name:"EMP",value:0,color:"gray"},{name:"EMP",value:0,color:"gray"},{name:"EMP",value:0,color:"gray"}],[{name:"EMP",value:0,color:"gray"},{name:"EMP",value:0,color:"gray"},{name:"EMP",value:0,color:"gray"},{name:"EMP",value:0,color:"gray"},{name:"EMP",value:0,color:"gray"},{name:"EMP",value:0,color:"gray"},{name:"EMP",value:0,color:"gray"},{name:"EMP",value:0,color:"gray"},{name:"EMP",value:0,color:"gray"}],[{name:"WSE",value:3,color:"white"},{name:"EMP",value:0,color:"gray"},{name:"EMP",value:0,color:"gray"},{name:"WMA",value:7,color:"white"},{name:"WSP",value:15,color:"white"},{name:"EMP",value:0,color:"gray"},{name:"EMP",value:0,color:"gray"},{name:"WL2",value:4,color:"white"},{name:"WS1",value:10,color:"white"}],[{name:"WPR",value:2,color:"white"},{name:"WLC",value:8,color:"white"},{name:"WCA",value:6,color:"white"},{name:"WPR",value:2,color:"white"},{name:"WCO",value:9,color:"white"},{name:"WS4",value:13,color:"white"},{name:"EMP",value:0,color:"gray"},{name:"WPR",value:2,color:"white"},{name:"WL1",value:5,color:"white"}],[{name:"WPR",value:2,color:"white"},{name:"EMP",value:0,color:"gray"},{name:"WS3",value:12,color:"white"},{name:"WFL",value:1,color:"white"},{name:"WS2",value:11,color:"white"},{name:"WSP",value:15,color:"white"},{name:"WPR",value:2,color:"white"},{name:"WS5",value:14,color:"white"},{name:"WPR",value:2,color:"white"}]]}function g(a){for(var b=1;16>b;b++)if(2===b)for(var c=0;6>c;c++)a=h(a,0,b);else if(15===b)for(var c=0;2>c;c++)a=h(a,0,b);else a=h(a,0,b);for(var b=16;31>b;b++)if(17===b)for(var c=0;6>c;c++)a=h(a,1,b);else if(30===b)for(var c=0;2>c;c++)a=h(a,1,b);else a=h(a,1,b);return a}function h(a,b,c){if(c>15){var e=!1;do{var f=Math.floor(3*Math.random()),g=Math.floor(9*Math.random());"EMP"===a[f][g].name&&(a[f][g].name=d(c),a[f][g].value=c,a[f][g].color="black",e=!0)}while(e===!1)}else{var e=!1;do{var f=Math.floor(3*Math.random())+5,g=Math.floor(9*Math.random());"EMP"===a[f][g].name&&(a[f][g].name=d(c),a[f][g].value=c,a[f][g].color="white",e=!0)}while(e===!1)}return a}function i(b){console.log("Displaying board layout");for(var c=0;c<a.ROWS;c++){for(var d="",e=0;e<a.COLS;e++){var f=b[c][e].name;d+=f+" "}console.log(d)}console.log("End display board")}function j(b,c,d){for(var e=!1,f=!1,g=0;g<a.ROWS;g++)for(var h=0;h<a.COLS;h++);for(var g=0;g<a.ROWS;g++)for(var h=0;h<a.COLS;h++)if(1===b[g][h].value){if(1==d&&0==g){if(b[g][h].promoted===!0)return console.log("go here"),"white";b[g][h].promoted=!0,console.log("come here",g,h)}e=!0}else if(16===b[g][h].value){if(1==d&&7===g){if(b[g][h].promoted===!0)return"black";b[g][h].promoted=!0,console.log("tis true")}f=!0}if(e!==!0&&f!==!0)throw new Error("Both players have no flag currently!");return e!==!0?(console.log("where my flag go"),"black"):f!==!0?(console.log("black flag should be dead"),"white"):""}function k(a,b,c,d){var e=[];console.log("Moving from ",c,d);for(var f=0;4>f;f++){var g={row:c,col:d},h={row:c,col:d};switch(f){case 0:h.row=g.row-1,h.col=g.col;break;case 1:h.row=g.row+1,h.col=g.col;break;case 2:h.row=g.row,h.col=g.col-1;break;case 3:h.row=g.row,h.col=g.col+1}try{e.push(n(a,b,g,h))}catch(i){}}return console.log("Total moves found: ",e.length),e}function l(a,b,c,d){for(var e=[],f=0;4>f;f++){var g={row:c,col:d},h={row:c,col:d};switch(f){case 0:h.row=g.row-1,h.col=g.col;break;case 1:h.row=g.row+1,h.col=g.col;break;case 2:h.row=g.row,h.col=g.col-1;break;case 3:h.row=g.row,h.col=g.col+1}try{if(n(a,b,g,h)){var i=h.row+"_"+h.col;e.push(document.getElementById(i))}}catch(j){}}return e}function m(b,c,d,e){var f=b[d.row][d.col];if(e.row<0||e.row>=a.ROWS||e.col<0||e.col>=a.COLS)throw new Error("One can only make a move within the board!");if(d.row===e.row&&d.col===e.col)throw new Error("One must move to a new position.");if(0==c&&"white"!==f.color||1==c&&"black"!==f.color)throw new Error("That's not your piece to move!");if(Math.abs(d.row-e.row)>1||Math.abs(d.col-e.col)>1||1===Math.abs(d.row-e.row)&&1===Math.abs(d.col-e.col))throw new Error("One space vertically or horizontally is the move limit!");if(b[d.row][d.col].color===b[e.row][e.col].color)throw new Error("Can't eat own player's piece!");if(""!==j(b,c,!1))throw new Error("Can only make a move if the game is not over!");return!0}function n(a,e,g,h){a||(console.log("building board from createMove"),a=f()),m(a,e,g,h);var i=angular.copy(a);i[h.row][h.col].value=b(a[g.row][g.col].value,a[h.row][h.col].value),i[h.row][h.col].name=d(i[h.row][h.col].value),i[h.row][h.col].color=c(i[h.row][h.col].value),i[g.row][g.col].color="gray",i[g.row][g.col].name="EMP",i[g.row][g.col].value=0;var k,l=j(i,1-e,!0);return""!==l?(console.log("the winner is ",l),k={endMatch:{endMatchScores:"white"===l?[1,0]:"black"===l?[0,1]:[0,0]}}):k={setTurn:{turnIndex:1-e}},[k,{set:{key:"board",value:i}},{set:{key:"deltaFrom",value:{row:g.row,col:g.col}}},{set:{key:"deltaTo",value:{row:h.row,col:h.col}}}]}function o(a){var b=a.move,c=a.turnIndexBeforeMove,d=a.stateBeforeMove,e=d.board;try{var f=b[2].set.value,g=b[3].set.value,h=n(e,c,f,g);if(console.log(c,f,g),!angular.equals(b,h))return console.log("fails"),!1}catch(i){return console.log("throws"),!1}return!0}a.ROWS=8,a.COLS=9,a.winningPiece=b,a.getPieceColor=c,a.getPieceName=d,a.getBlankBoard=e,a.getInitialBoard=f,a.setupInitialBoard=g,a.addToBoard=h,a.showBoardConsole=i,a.getWinner=j,a.getMovesForPiece=k,a.getLegalMoves=l,a.checkLegalMove=m,a.createMove=n,a.isMoveOk=o}(gameLogic||(gameLogic={}));var game;!function(a){function b(){console.log("Translation of 'RULES_OF_GENERALS' is "+translate("RULES_OF_GENERALS")),resizeGameAreaService.setWidthToHeight(1),gameService.setGame({minNumberOfPlayers:2,maxNumberOfPlayers:2,isMoveOk:gameLogic.isMoveOk,updateUI:l}),document.addEventListener("animationend",j,!1),document.addEventListener("webkitAnimationEnd",j,!1),document.addEventListener("oanimationend",j,!1),dragAndDropService.addDragListener("gameArea",c)}function c(a,b,c){D=document.getElementById("gameArea"),E=document.getElementById("draggingLines"),F=document.getElementById("verticalDraggingLine"),G=document.getElementById("horizontalDraggingLine");var i,j,k=b-D.offsetLeft,l=c-D.offsetTop,m=Math.floor(gameLogic.COLS*k/D.clientWidth),n=Math.floor(gameLogic.ROWS*l/D.clientHeight);if(0>k||0>l||k>=D.clientWidth||l>=D.clientHeight){if(E.style.display="none",!C)return;var o=e();d({top:l-o.height/2,left:k-o.width/2})}else{J===!0?(i=gameLogic.ROWS-n-1,j=gameLogic.COLS-m-1):(i=n,j=m),console.log("Rows and cols of current orientation",i,j);var p=g(i,j);if(F.setAttribute("x1",p.width.toString()),F.setAttribute("x2",p.width.toString()),G.setAttribute("y1",p.height.toString()),G.setAttribute("y2",p.height.toString()),"touchstart"===a&&(z.col<0||z.row<0)){z={row:n,col:m};var q=v.board[i][j];C=document.getElementById(i+"_"+j),console.log("Lifting",q.name,"at",JSON.stringify(z),"turn",w),C&&"EMP"!=q.name&&("black"!=q.color&&0==w||"white"!=q.color&&1==w)&&(I++,C.style.zIndex=++I+"",C.style.width="110%",C.style.height="110%",C.style.position="absolute",E.style.display="inline",console.log(C.style.zIndex)),H=gameLogic.getLegalMoves(v.board,w,i,j);for(var r=0;r<H.length;r++)H[r].style.border="5px solid #99FF33"}if(!C)return E.style.display="none",void console.log("what does this even mean")}if("touchend"===a||"touchcancel"===a||"touchleave"===a||"mouseup"===a){for(var r=0;r<H.length;r++)H[r].style.border=null;H=[],console.log("let go of dragging piece, checking where it was placed"),d(f(z.row,z.col)),I=29,B=C,C.style.zIndex="29",A={row:n,col:m},E.style.display="none",C.style.width="100%",C.style.height="100%",C.style.position="absolute",h(z,A),C=null,z={row:-1,col:-1},A={row:-1,col:-1}}}function d(a){var b=f(z.row,z.col);C.style.left=a.left-b.left+"px",C.style.top=a.top-b.top+"px"}function e(){return{width:D.clientWidth/gameLogic.COLS,height:D.clientHeight/gameLogic.ROWS}}function f(a,b){var c=e();return J===!0&&(a=gameLogic.ROWS-a-1,b=gameLogic.COLS-b-1),{top:a*c.height,left:b*c.width}}function g(a,b){var c=e();return{width:b*c.width+c.width/2,height:a*c.height+c.height/2}}function h(a,b){$rootScope.$apply(function(){var c="Dragged piece "+a.row+"x"+a.col+" to square "+b.row+"x"+b.col;log.info(c)}),J===!0&&(a.row=gameLogic.ROWS-a.row-1,a.col=gameLogic.COLS-a.col-1,b.row=gameLogic.ROWS-b.row-1,b.col=gameLogic.COLS-b.col-1);try{var c=gameLogic.createMove(v.board,x.turnIndexAfterMove,a,b);t=!1,gameService.makeMove(c),log.info(["Make movement from"+a.row+"*"+a.col+" to "+b.row+"*"+b.col])}catch(d){return void log.info(["Illegal movement from"+a.row+"*"+a.col+" to "+b.row+"*"+b.col])}}function i(){return a.currentPlayMode?!0:void 0}function j(){$rootScope.$apply(function(){log.info("Animation ended"),s=!0,u&&k()})}function k(){console.log("Computer making move"),gameService.makeMove(aiService.findComputerMove(x))}function l(b){log.info("Calling updateUI:",b),s=!1,x=b,v=b.stateAfterMove,a.currentPlayMode=b.playMode,v.board||(v.board=gameLogic.getInitialBoard()),m(b),t=b.turnIndexAfterMove>=0&&b.yourPlayerIndex===b.turnIndexAfterMove,w=b.turnIndexAfterMove,u=t&&""===b.playersInfo[b.yourPlayerIndex].playerId,u&&(t=!1,v.delta||k())}function m(b){if(console.log(a.currentPlayMode),"single-player"!==b.playMode&&"playAgainstTheComputer"!==b.playMode){var c=document.getElementById("gameArea");switch(b.yourPlayerIndex){case 0:console.log("White player"),c.className="rotateW",J=!1;for(var d=0;d<gameLogic.ROWS;d++)for(var e=0;e<gameLogic.COLS;e++){var f=document.getElementById(d+"_"+e),g=b.stateAfterMove.board[d][e];f.className=""}break;case 1:console.log("Black player"),c.className="rotateB",J=!0;for(var d=0;d<gameLogic.ROWS;d++)for(var e=0;e<gameLogic.COLS;e++){var h=document.getElementById(d+"_"+e),g=b.stateAfterMove.board[d][e];"black"===g.color&&(h.className="TFL")}}}}function n(a,b,c){var d=" ";return 0===c?d="white":1===c?d="black":console.log("Illegal player ID"),v.board[a][b].color!==d?(console.log("Not your piece to move"),!1):!0}function o(a,b){if(log.info(["Clicked on cell:",a,b]),"?throwException"===window.location.search)throw new Error("Throwing the error because URL has '?throwException'");if(t)try{if(console.log("About to decide on cell click - delta and is it my piece?",y,n(a,b,w)),y===!1&&1==n(a,b,w))return console.log("Able to make move from location"),z.row=a,z.col=b,void(y=!0);if(y===!0){if(z.row===a&&z.col===b)return y=!1,z.row=-1,void(z.col=-1);console.log("deltaFrom is currently: ",z.row,z.col," with turn index ",w);var c=gameLogic.createMove(v.board,x.turnIndexAfterMove,z,{row:a,col:b});return t=!1,y=!1,gameService.makeMove(c),void console.log("made move to: ",a,b)}return void console.log("erroneous cell click result")}catch(d){return void log.info(["Caught cell click error"])}}function p(a,b){var c=v.board[a][b];return""!==c.name}function q(b,c){{var d=v.board[b][c],e=d.value;document.getElementById("gameArea"),document.getElementById(b+"_"+c)}return 0===w||"playAgainstTheComputer"===a.currentPlayMode?"black"===d.color&&(e=32):1===w&&"white"===d.color&&(e=31),r(e)}function r(a){return a>=16&&30>=a&&(a-=15),"imgs/"+gameLogic.getPieceName(a)+".png"}var s=!1,t=!1,u=!1,v=null,w=null,x=null,y=!1,z={row:-1,col:-1},A={row:-1,col:-1};a.currentPlayMode="",a.isHelpModalShown=!1;var B,C,D,E,F,G,H,I=29,J=!1;a.init=b,a.handleDragEvent=c,a.playerTurn=i,a.cellClicked=o,a.shouldShowImage=p,a.showImage=q}(game||(game={})),angular.module("myApp",["ngTouch","ui.bootstrap","gameServices"]).run(function(){$rootScope.game=game,translate.setLanguage("en",{RULES_OF_GENERALS:"Rules of Game of The Generals",RULES_SLIDE1:"Start with a field of arbitrarily placed pieces.",RULES_SLIDE2:"During your turn, you can move any piece one step vertically or horizontally.",RULES_SLIDE3:"Take the enemy flag (without knowing which piece it is) before losing yours.",RULES_SLIDE4:"Alternatively, send your own flag to the enemy backrow and win if it survives one turn. Be careful since all pieces can kill a flag, including an attacking flag.",RULES_SLIDE5:"Spies are stronger than all other pieces, but is the only piece besides the flag that loses to the private. Starred pieces (generals) are otherwise the strongest, going downwards by total stars.",CLOSE:"Close"}),game.init()});var aiService;!function(a){function b(a,b){for(var c=[],d=0;d<gameLogic.ROWS;d++)for(var e=0;e<gameLogic.COLS;e++)for(var f=0;4>f;f++){var g={row:d,col:e},h={row:d,col:e};switch(f){case 0:h.row=g.row-1,h.col=g.col;break;case 1:h.row=g.row+1,h.col=g.col;break;case 2:h.row=g.row,h.col=g.col-1;break;case 3:h.row=g.row,h.col=g.col+1}try{c.push(gameLogic.createMove(a,b,g,h))}catch(i){}}return c}function c(a){return d(a.stateAfterMove.board,a.turnIndexAfterMove,{millisecondsLimit:1e3})}function d(a,c){var d=b(a,c).length,e=Math.floor(Math.random()*d);return b(a,c)[e]}a.getPossibleMoves=b,a.findComputerMove=c,a.createComputerMove=d}(aiService||(aiService={}));
//# sourceMappingURL=everything.min.js.map