var gameLogic;!function(a){function b(a,b){return 1===a&&16===b?1:16===a&&1===b?16:16!==a&&16!==b||0===a&&0===b?2===a&&30===b||30===a&&2===b?2:a-b!==15&&b-a!==15||0===a||0===b?a>b?a:b>a?b:void 0:0:Math.min(a,a)}function c(a){return 0===a?"gray":a>15?"black":"white"}function d(a){switch(a){case 0:return"EMP";case 1:return"WFL";case 2:return"WPR";case 3:return"WSE";case 4:return"WL2";case 5:return"WL1";case 6:return"WCA";case 7:return"WMA";case 8:return"WLC";case 9:return"WCO";case 10:return"WS1";case 11:return"WS2";case 12:return"WS3";case 13:return"WS4";case 14:return"WS5";case 15:return"WSP";case 16:return"BFL";case 17:return"BPR";case 18:return"BSE";case 19:return"BL2";case 20:return"BL1";case 21:return"BCA";case 22:return"BMA";case 23:return"BLC";case 24:return"BCO";case 25:return"BS1";case 26:return"BS2";case 27:return"BS3";case 28:return"BS4";case 29:return"BS5";case 30:return"BSP"}}function e(){for(var b=[],c=0;c<a.ROWS;c++){b[c]=[];for(var d=0;d<a.COLS;d++)b[c][d]={name:"EMP",value:0,color:"gray"}}return f(b)}function f(a){for(var b=1;16>b;b++)if(2===b)for(var c=0;6>c;c++)a=g(a,0,b);else if(15===b)for(var c=0;2>c;c++)a=g(a,0,b);else a=g(a,0,b);for(var b=16;31>b;b++)if(17===b)for(var c=0;6>c;c++)a=g(a,1,b);else if(30===b)for(var c=0;2>c;c++)a=g(a,1,b);else a=g(a,1,b);return a}function g(a,b,c){if(c>15){var e=!1;do{var f=Math.floor(3*Math.random()),g=Math.floor(9*Math.random());"EMP"===a[f][g].name&&(a[f][g].name=d(c),a[f][g].value=c,a[f][g].color="black",e=!0)}while(e===!1)}else{var e=!1;do{var f=Math.floor(3*Math.random())+5,g=Math.floor(9*Math.random());"EMP"===a[f][g].name&&(a[f][g].name=d(c),a[f][g].value=c,a[f][g].color="white",e=!0)}while(e===!1)}return a}function h(b){console.log("Displaying board layout");for(var c=0;c<a.ROWS;c++){for(var d="",e=0;e<a.COLS;e++){var f=b[c][e].name;d+=f+" "}console.log(d)}console.log("End display board")}function i(b,c,d){for(var e=!1,f=!1,g=0;g<a.ROWS;g++)for(var h=0;h<a.COLS;h++);for(var g=0;g<a.ROWS;g++)for(var h=0;h<a.COLS;h++)if(1===b[g][h].value){if(1==d&&0==g){if(b[g][h].promoted===!0)return console.log("go here"),"white";b[g][h].promoted=!0,console.log("come here",g,h)}e=!0}else if(16===b[g][h].value){if(1==d&&7===g){if(b[g][h].promoted===!0)return"black";b[g][h].promoted=!0,console.log("tis true")}f=!0}if(e!==!0&&f!==!0)throw new Error("Both players have no flag currently!");return e!==!0?(console.log("where my flag go"),"black"):f!==!0?(console.log("black flag should be dead"),"white"):""}function j(a,b,c,d){var e=[];console.log("Moving from ",c,d);for(var f=0;4>f;f++){var g={row:c,col:d},h={row:c,col:d};switch(f){case 0:h.row=g.row-1,h.col=g.col;break;case 1:h.row=g.row+1,h.col=g.col;break;case 2:h.row=g.row,h.col=g.col-1;break;case 3:h.row=g.row,h.col=g.col+1}try{e.push(l(a,b,g,h))}catch(i){}}return console.log("Total moves found: ",e.length),e}function k(b,c,d,e){var f=b[d.row][d.col];if(e.row<0||e.row>=a.ROWS||e.col<0||e.col>=a.COLS)throw new Error("One can only make a move within the board!");if(d.row===e.row&&d.col===e.col)throw new Error("One must move to a new position.");if(0==c&&"white"!==f.color||1==c&&"black"!==f.color)throw new Error("That's not your piece to move!");if(Math.abs(d.row-e.row)>1||Math.abs(d.col-e.col)>1||1===Math.abs(d.row-e.row)&&1===Math.abs(d.col-e.col))throw new Error("One space vertically or horizontally is the move limit!");if(b[d.row][d.col].color===b[e.row][e.col].color)throw console.log("Can't eat your own piece"),new Error("Can't eat own player's piece!");if(""!==i(b,c,!1))throw new Error("Can only make a move if the game is not over!");return!0}function l(a,f,g,h){a||(console.log("building board from createMove"),a=e()),k(a,f,g,h);var j=angular.copy(a);j[h.row][h.col].value=b(a[g.row][g.col].value,a[h.row][h.col].value),j[h.row][h.col].name=d(j[h.row][h.col].value),j[h.row][h.col].color=c(j[h.row][h.col].value),j[g.row][g.col].color="gray",j[g.row][g.col].name="EMP",j[g.row][g.col].value=0;var l,m=i(j,1-f,!0);return""!==m?(console.log("the winner is ",m),l={endMatch:{endMatchScores:"white"===m?[1,0]:"black"===m?[0,1]:[0,0]}}):l={setTurn:{turnIndex:1-f}},[l,{set:{key:"board",value:j}},{set:{key:"deltaFrom",value:{row:g.row,col:g.col}}},{set:{key:"deltaTo",value:{row:h.row,col:h.col}}}]}function m(a){var b=a.move,c=a.turnIndexBeforeMove,d=a.stateBeforeMove,e=d.board;try{var f=b[2].set.value,g=b[3].set.value;console.log("is this the call?");var h=l(e,c,f,g);if(console.log(c,f,g),!angular.equals(b,h))return console.log("fails"),!1}catch(i){return console.log("throws"),!1}return!0}a.ROWS=8,a.COLS=9,a.winningPiece=b,a.getPieceColor=c,a.getPieceName=d,a.getInitialBoard=e,a.setupInitialBoard=f,a.addToBoard=g,a.showBoardConsole=h,a.getWinner=i,a.getMovesForPiece=j,a.checkLegalMove=k,a.createMove=l,a.isMoveOk=m}(gameLogic||(gameLogic={}));var game;!function(a){function b(){console.log("Translation of 'RULES_OF_TICTACTOE' is "+translate("RULES_OF_TICTACTOE")),resizeGameAreaService.setWidthToHeight(1),gameService.setGame({minNumberOfPlayers:2,maxNumberOfPlayers:2,isMoveOk:gameLogic.isMoveOk,updateUI:e}),document.addEventListener("animationend",c,!1),document.addEventListener("webkitAnimationEnd",c,!1),document.addEventListener("oanimationend",c,!1)}function c(){$rootScope.$apply(function(){log.info("Animation ended"),k=!0,m&&d()})}function d(){gameService.makeMove(aiService.findComputerMove(n))}function e(a){log.info("Game got updateUI:",a),k=!1,n=a,o=a.stateAfterMove,o.board||(o.board=gameLogic.getInitialBoard()),l=a.turnIndexAfterMove>=0&&a.yourPlayerIndex===a.turnIndexAfterMove,m=l&&""===a.playersInfo[a.yourPlayerIndex].playerId,m&&(l=!1,o.delta||d())}function f(a,b){if(log.info("Clicked on cell:",a,b),"?throwException"===window.location.search)throw new Error("Throwing the error because URL has '?throwException'");if(l)try{var c=gameLogic.createMove(o.board,a,b,n.turnIndexAfterMove);l=!1,gameService.makeMove(c)}catch(d){return void log.info(["Cell is already full in position:",a,b])}}function g(a,b){var c=o.board[a][b];return""!==c}function h(a,b){return"X"===o.board[a][b]}function i(a,b){return"O"===o.board[a][b]}function j(a,b){return!k&&o.delta&&o.delta.row===a&&o.delta.col===b}var k=!1,l=!1,m=!1,n=null,o=null;a.isHelpModalShown=!1,a.init=b,a.cellClicked=f,a.shouldShowImage=g,a.isPieceX=h,a.isPieceO=i,a.shouldSlowlyAppear=j}(game||(game={})),angular.module("myApp",["ngTouch","ui.bootstrap","gameServices"]).run(function(){$rootScope.game=game,translate.setLanguage("en",{RULES_OF_TICTACTOE:"Rules of TicTacToe",RULES_SLIDE1:"You and your opponent take turns to mark the grid in an empty spot. The first mark is X, then O, then X, then O, etc.",RULES_SLIDE2:"The first to mark a whole row, column or diagonal wins.",CLOSE:"Close"}),game.init()});var aiService;!function(a){function b(a,b){for(var c=[],d=0;d<gameLogic.ROWS;d++)for(var e=0;e<gameLogic.COLS;e++)for(var f=0;4>f;f++){var g={row:d,col:e},h={row:d,col:e};switch(f){case 0:h.row=g.row-1,h.col=g.col;break;case 1:h.row=g.row+1,h.col=g.col;break;case 2:h.row=g.row,h.col=g.col-1;break;case 3:h.row=g.row,h.col=g.col+1}try{c.push(gameLogic.createMove(a,b,g,h))}catch(i){}}return c}function c(a){return d(a.stateAfterMove.board,a.turnIndexAfterMove,{millisecondsLimit:1e3})}function d(a,c){var d=b(a,c).length,e=Math.floor(Math.random()*d+1);return b(a,c)[e]}a.getPossibleMoves=b,a.findComputerMove=c,a.createComputerMove=d}(aiService||(aiService={}));
//# sourceMappingURL=everything.min.js.map